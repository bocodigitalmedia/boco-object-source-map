// Generated by CoffeeScript 1.10.0
var configure,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

configure = function() {
  var BocoObjectSourceMap, Errors, InvalidPropertySourceResolver, ObjectSourceMap, ObjectSourceMapError, PropertySource, PropertySourceNotFound;
  ObjectSourceMapError = (function(superClass) {
    extend(ObjectSourceMapError, superClass);

    ObjectSourceMapError.code = "ER_OBJECT_SOURCE_MAP_ERROR";

    function ObjectSourceMapError(message, payload) {
      this.name = this.constructor.name;
      this.code = this.constructor.code;
      this.message = message;
      this.payload = payload;
      Error.captureStackTrace(this, this.constructor);
    }

    return ObjectSourceMapError;

  })(Error);
  InvalidPropertySourceResolver = (function(superClass) {
    extend(InvalidPropertySourceResolver, superClass);

    InvalidPropertySourceResolver.code = "ER_INVALID_PROPERTY_SOURCE_RESOLVER";

    function InvalidPropertySourceResolver(message, arg) {
      var resolver;
      resolver = arg.resolver;
      if (message == null) {
        message = "Invalid PropertySourceResolver: " + (JSON.stringify(resolver));
      }
      InvalidPropertySourceResolver.__super__.constructor.call(this, message, {
        resolver: resolver
      });
    }

    return InvalidPropertySourceResolver;

  })(ObjectSourceMapError);
  PropertySourceNotFound = (function(superClass) {
    extend(PropertySourceNotFound, superClass);

    PropertySourceNotFound.code = "ER_PROPERTY_SOURCE_NOT_FOUND";

    function PropertySourceNotFound(message, arg) {
      var property;
      property = arg.property;
      if (message == null) {
        message = "Source not found for '" + property + "'";
      }
      PropertySourceNotFound.__super__.constructor.call(this, message, {
        property: property
      });
    }

    return PropertySourceNotFound;

  })(ObjectSourceMapError);
  PropertySource = (function() {
    PropertySource.prototype.property = null;

    PropertySource.prototype.resolvers = null;

    function PropertySource(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.resolvers == null) {
        this.resolvers = [];
      }
    }

    PropertySource.prototype.applyResolver = function(data, resolver) {
      return resolver(data, this.property);
    };

    PropertySource.prototype.resolve = function(data) {
      return this.resolvers.reduce(this.applyResolver.bind(this), data);
    };

    return PropertySource;

  })();
  ObjectSourceMap = (function() {
    ObjectSourceMap.prototype.propertySources = null;

    ObjectSourceMap.prototype.defaultResolver = null;

    function ObjectSourceMap(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        if (key !== 'propertySources') {
          this[key] = val;
        }
      }
      if (this.propertySources == null) {
        this.propertySources = {};
      }
      if (props != null ? props.propertySources : void 0) {
        this.definePropertySources(props != null ? props.propertySources : void 0);
      }
    }

    ObjectSourceMap.prototype.createResolver = function(resolver) {
      if (resolver == null) {
        resolver = this.defaultResolver;
      }
      if (typeof resolver === 'function') {
        return resolver;
      }
      if (typeof resolver === 'string') {
        return (function(data) {
          return data[resolver];
        });
      }
      throw new InvalidPropertySourceResolver(null, {
        resolver: resolver
      });
    };

    ObjectSourceMap.prototype.createPropertySource = function(property, resolvers) {
      resolvers = [].concat(resolvers).map(this.createResolver.bind(this));
      return new PropertySource({
        property: property,
        resolvers: resolvers
      });
    };

    ObjectSourceMap.prototype.definePropertySource = function(property, resolvers) {
      return this.propertySources[property] = this.createPropertySource(property, resolvers);
    };

    ObjectSourceMap.prototype.definePropertySources = function(propertyResolvers) {
      var property, resolvers, results;
      results = [];
      for (property in propertyResolvers) {
        if (!hasProp.call(propertyResolvers, property)) continue;
        resolvers = propertyResolvers[property];
        results.push(this.definePropertySource(property, resolvers));
      }
      return results;
    };

    ObjectSourceMap.prototype.definePropertiesSource = function(properties, resolvers) {
      var i, len, property, results;
      results = [];
      for (i = 0, len = properties.length; i < len; i++) {
        property = properties[i];
        results.push(this.definePropertySource(property, resolvers));
      }
      return results;
    };

    ObjectSourceMap.prototype.getPropertySource = function(property) {
      if (this.propertySources.hasOwnProperty(property)) {
        return this.propertySources[property];
      }
      throw new PropertySourceNotFound(null, {
        property: property
      });
    };

    ObjectSourceMap.prototype.resolvePropertySource = function(data, property) {
      return this.getPropertySource(property).resolve(data);
    };

    ObjectSourceMap.prototype.resolvePropertySources = function(data, properties) {
      var i, len, property, resolved;
      resolved = {};
      for (i = 0, len = properties.length; i < len; i++) {
        property = properties[i];
        resolved[property] = this.resolvePropertySource(data, property);
      }
      return resolved;
    };

    ObjectSourceMap.prototype.resolve = function(data) {
      var properties;
      properties = Object.getOwnPropertyNames(this.propertySources);
      return this.resolvePropertySources(data, properties);
    };

    ObjectSourceMap.prototype.define = function(propertySources) {
      return this.definePropertySources(propertySources);
    };

    return ObjectSourceMap;

  })();
  Errors = {
    ObjectSourceMapError: ObjectSourceMapError,
    InvalidPropertySourceResolver: InvalidPropertySourceResolver,
    PropertySourceNotFound: PropertySourceNotFound
  };
  return BocoObjectSourceMap = {
    configure: configure,
    ObjectSourceMap: ObjectSourceMap,
    PropertySource: PropertySource,
    Errors: Errors
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
